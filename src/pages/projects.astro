---
import Layout from '@layouts/Global.astro';

import { getCollection } from 'astro:content';

const projects = await getCollection('projects');
type Projects = typeof projects;

const projectsByYear: Record<number, Projects> = {};
const projectsSorted: [number, Projects][] = [];

for (const project of projects) {
    const year = project.data.date.getFullYear();

    // Ensure that the year property is defined
    if (year == null) continue; // Using strict null check

    // Initialize year key if it doesn't exist
    if (!projectsByYear[year]) {
        projectsByYear[year] = [];
    }

    // Render the project content
    (project as any).rendered = await project.render(); // stupid hack but i have a headache so i refuse to fix it
    projectsByYear[year].push(project);
}

// Begin sorting the projects
for (const [ year, projs ] of Object.entries(projectsByYear)) {
    // Sort by date in reverse chronological order
    // These are the individual projects being sorted
    projs.sort((a, b) => b.data.date - a.data.date);

    // Push for further sorting
    projectsSorted.push([ Number(year), projs ]);
}

// Sort project lists by year in reverse chronological order
// We're only sorting the sections here, not the individual projects
projectsSorted.sort(([ yearA ], [ yearB ]) => yearB - yearA);
---

<Layout title="Projects" desc="A comprehensive list of projects I've worked on over the years.">
    <section class="flex-center">
        <h1>My Portfolio</h1>
        <span>A comprehensive list of projects I've worked on over the years.</span>
    </section>
    {(projectsSorted.map(([year, projects]) =>
        <article class="project-list">
            <div>
                <h2>{year}</h2>
                <hr>
            </div>
            {projects.map(project => {
                const { Content } = (project as any).rendered;
                return (
                    <div class="project">
                        <h3>{project.data.title}</h3>
                        <p>{project.data.description}</p>
                        <div class="tags">
                            {project.data.tags.map(tag => <span>{tag}</span>)}
                        </div>
                        <Content />
                    </div>
                )
            })}
        </article>
    ))}
</Layout>

<style lang="scss">
    .project-list {
        display: flex;
        flex-direction: column;

        .project {
            padding: 1rem;
            margin-bottom: 1rem;
            background: color-mix(in srgb, var(--background), var(--foreground) 2%);
            border: 1px solid var(--alt-foreground);
            border-radius: 0.5rem;
            transition: transform 0.2s;

            .tags {
                display: flex;
                flex-wrap: wrap;
                gap: 0.5rem;

                span {
                    background: var(--alt-background);
                    border-radius: 0.25rem;
                    padding: 0.25rem 0.5rem;
                    font-size: 1rem;
                }
            }

            &:hover {
                transform: scale(1.02);
            }
        }
    }
</style>